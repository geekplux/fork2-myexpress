// Generated by CoffeeScript 1.7.1
(function() {
  var createInjector, getArgumentsName;

  getArgumentsName = function(fn) {
    var FN_ARG, FN_ARGS, FN_ARG_SPLIT, STRIP_COMMENTS, argDecl, fnText, names;
    fnText = fn.toString();
    FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
    FN_ARG_SPLIT = /,/;
    FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
    STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/g;
    names = [];
    argDecl = fnText.replace(STRIP_COMMENTS, "").match(FN_ARGS);
    argDecl[1].split(FN_ARG_SPLIT).forEach(function(arg) {
      arg.replace(FN_ARG, function(all, underscore, name) {
        names.push(name);
      });
    });
    return names;
  };

  createInjector = function(handler, app) {
    var injector;
    injector = function(req, res, next) {
      injector.dependencies_loader(req, res, next)(function(err, values) {
        if (err && next instanceof Function) {
          next(err);
        } else {
          handler.apply(handler, values);
        }
      });
    };
    injector.extract_params = function() {
      return getArgumentsName(handler);
    };
    injector.dependencies_loader = function(req, res, next) {
      var appFac, error, i, index, item, names, params, values, _arguments, _factories, _i, _j, _len, _len1;
      names = this.extract_params();
      appFac = [];
      values = [];
      _arguments = arguments;
      _factories = app._factories;
      error = void 0;
      params = getArgumentsName(this.dependencies_loader);
      for (i = _i = 0, _len = _arguments.length; _i < _len; i = ++_i) {
        item = _arguments[i];
        _factories[params[i]] = item;
      }
      for (_j = 0, _len1 = names.length; _j < _len1; _j++) {
        item = names[_j];
        appFac.push(app._factories[item]);
      }
      next = function(err, value) {
        var e, func;
        error = err;
        if (value != null) {
          values.push(value);
        }
        if (index === appFac.length) {
          return;
        }
        func = appFac[index++];
        if (!func) {
          if (!error) {
            error = new Error("Factory not defined: " + names[index - 1]);
          }
        } else if (func instanceof Function) {
          try {
            func(req, res, next);
          } catch (_error) {
            e = _error;
            next(e);
          }
        } else {
          next(err, func);
        }
      };
      index = 0;
      next();
      return function(handler) {
        return handler(error, values);
      };
    };
    return injector;
  };

  module.exports = createInjector;

}).call(this);
